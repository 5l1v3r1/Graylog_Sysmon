// Sysmon Installation - Stage -0
// -- Sysmon has to be installed on Windows, and be run with: sysmon –i –accepteula –h md5 –n -l 
// -- Transport should be a winlogbeat
// -- Consider using the Graylog Sidecar to manage winlogbeat remotely
rule "sysmon cleanup"
when
    // Only run for Sysmon messages
    has_field("winlogbeat_source_name") AND contains(to_string($message.winlogbeat_source_name), "Microsoft-Windows-Sysmon")
then

    // Rename some fields to clean up
    rename_field("winlogbeat_computer_name", "sysmon_computer_name");
    rename_field("winlogbeat_event_data_Image", "sysmon_data_process");
    rename_field("winlogbeat_event_data_UtcTime", "sysmon_data_utc_time");
    rename_field("winlogbeat_event_id", "sysmon_event_id");
    rename_field("winlogbeat_level", "sysmon_data_level");
    rename_field("winlogbeat_task", "sysmon_task");
    rename_field("winlogbeat_event_data_User", "sysmon_data_user");
    rename_field("winlogbeat_event_data_TargetFilename", "sysmon_data_file_created");
    rename_field("winlogbeat_event_data_CreationUtcTime", "sysmon_data_file_created_time");
    rename_field("winlogbeat_event_data_PreviousCreationUtcTime", "sysmon_data_file_created_time_previous");
    rename_field("winlogbeat_user_name", "sysmon_data_user_name");
    rename_field("winlogbeat_thread_id", "sysmon_thread_id"); 
    rename_field("winlogbeat_user_domain", "sysmon_user_domain");
    rename_field("winlogbeat_user_identifier", "sysmon_user_identifier");
    rename_field("winlogbeat_user_type", "sysmon_user_type");
    rename_field("winlogbeat_event_data_DestinationHostname", "sysmon_dns_lookup");
    rename_field("winlogbeat_event_data_DestinationIp", "sysmon_dns_lookup_ip");
    rename_field("winlogbeat_event_data_DestinationPort", "sysmon_dest_port");
    rename_field("winlogbeat_event_data_DestinationPortName", "sysmon_dest_port_name");
    rename_field("winlogbeat_event_data_Initiated", "sysmon_con_initiated");
    rename_field("winlogbeat_event_data_Protocol", "sysmon_con_proto");
    rename_field("winlogbeat_event_data_SourceHostname", "sysmon_src_name");
    rename_field("winlogbeat_event_data_SourceIp", "sysmon_src_ip");
    rename_field("winlogbeat_event_data_SourcePort", "sysmon_src_port");
    rename_field("winlogbeat_event_data_SourcePortName", "sysmon_src_port_name");
    rename_field("winlogbeat_event_data_CommandLine", "sysmon_cmd_event");
    rename_field("winlogbeat_event_data_CurrentDirectory", "sysmon_cmd_location");
    rename_field("winlogbeat_event_data_Hashes", "sysmon_cmd_hash");
    rename_field("winlogbeat_event_data_IntegrityLevel", "sysmon_cmd_integrity");
    rename_field("winlogbeat_event_data_LogonId", "sysmon_cmd_logon_id");
    rename_field("winlogbeat_event_data_ParentCommandLine", "sysmon_cmd_parent_cmd");
    rename_field("winlogbeat_event_data_ParentImage", "sysmon_cmd_parent_file");
    rename_field("winlogbeat_event_data_ParentProcessId", "sysmon_cmd_parent_pid");
    rename_field("winlogbeat_event_data_TerminalSessionId", "sysmon_cmd_terminal_pid");
    rename_field("winlogbeat_event_data_LogonGuid", "sysmon_cmd_logon_guid");
    rename_field("winlogbeat_event_data_ParentProcessGuid", "sysmon_cmd_parent_guid");
    rename_field("winlogbeat_event_data_TargetObject", "sysmon_registry_object");
    rename_field("winlogbeat_event_EventType", "sysmon_registry_Type");
    rename_field("winlogbeat_event_data_Details", "sysmon_registry_set");
    rename_field("winlogbeat_event_data_SourceImage", "sysmon_paccess_source_img");
    rename_field("winlogbeat_event_data_SourceProcessGUID", "sysmon_paccess_pguid");
    rename_field("winlogbeat_event_data_SourceProcessId", "sysmon_paccess_pid");
    rename_field("winlogbeat_event_data_SourceThreadId", "sysmon_paccess_threadid");
    rename_field("winlogbeat_event_data_TargetImage", "sysmon_paccess_target_image");
    rename_field("winlogbeat_event_data_TargetProcessGUID", "sysmon_paccess_target_guid");
    rename_field("winlogbeat_event_data_TargetProcessid", "sysmon_paccess_target_pid");
    rename_field("winlogbeat_event_data_DestinationIp_geolocation", "geo_point");
    rename_field("winlogbeat_event_data_PipeName", "sysmon_pipe_name");
    rename_field("winlogbeat_event_data_ProcessId", "sysmon_pipe_pid");
    rename_field("winlogbeat_process_id", "sysmon_img_pid");
    rename_field("winlogbeat_event_data_ImageLoaded", "sysmon_imgloaded");
    rename_field("winlogbeat_event_data_SignatureStatus", "sysmon_signatureStatus");
    rename_field("winlogbeat_event_data_Signed", "sysmon_signed");

    // Remove clutter.
    let fix = regex("^\\{(\\S+)\\}$", to_string($message.winlogbeat_event_data_ProcessGuid));
    set_field("sysmon_data_process_guid", to_string(fix["0"]));
    remove_field("winlogbeat_event_data_ProcessGuid");

    let fix = regex("^\\{(\\S+)\\}$", to_string($message.winlogbeat_provider_guid));
    set_field("sysmon_data_provider_gui", to_string(fix["0"]));
    remove_field("winlogbeat_provider_guid");


    // Remove unwanted fields
    remove_field("name");
    remove_field("tags");
    remove_field("type");

    // Remove winlogbeats fields we don't need
    //remove_field("winlogbeat_event_data_ProcessId");
    //remove_field("winlogbeat_log_name");
    //remove_field("winlogbeat_opcode");
    //remove_field("winlogbeat_process_id");
    //remove_field("winlogbeat_record_number");
    //remove_field("winlogbeat_source_name");
    //remove_field("winlogbeat_tags");
    //remove_field("winlogbeat_type");
    //remove_field("winlogbeat_version");
    //remove_field("winlogbeat_event_data_SourceIsIpv6");
    //remove_field("winlogbeat_event_data_DestinationIsIpv6");
end
